'''Problem 12: Highly Divisible Triangular Number

https://projecteuler.net/problem=12

The sequence of triangle numbers is generated by adding the natural numbers. So
the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten
terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

1: 1
3: 1, 3
6: 1, 2, 3, 6
10: 1, 2, 5, 10
15: 1, 3, 5, 15
21: 1, 3, 7, 21
28: 1, 2, 4, 7, 14, 28
 
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?'''


from math import sqrt, floor


def triangle_number(n: int) -> int:
    '''Return the nth triangle number'''
    return int(n * (n+1) / 2)


def divisors(num: int) -> list[int]:
    '''Return a list of divisors of num'''
    if num == 1: 
        return [1]
    elif num == 2:
        return [1, 2]
    else:
        divisors = [1, num]
        # Note that divisors come in pairs: if d is a divisor of N, so is N/d.
        # Only need to test up to sqrt(N). Either d <= sqrt(N) <= N/d or N/d <= sqrt(N) <= d
        for test_divisor in range(2, floor(sqrt(num))):
            if num % test_divisor == 0: 
                divisors.append(test_divisor)
                divisors.append(int(num / test_divisor))
        return sorted(divisors)


def first_triangle_number_with_n_divisors(n: int) -> int:
    '''Return first triangle number with at least n divisors'''
    
    largest_num_divisors = 0 # largest number of divisors found so far
    k = 1 # triangle number index

    while largest_num_divisors <= n:
        current_triangle_number = triangle_number(k)
        list_divisors = divisors(current_triangle_number)
        if len(list_divisors) > largest_num_divisors:
            largest_num_divisors = len(list_divisors)
            print(f"{k}th triangle number, {current_triangle_number}, has {largest_num_divisors} divisors:\n{list_divisors}\n")
        k += 1
    return current_triangle_number


print(first_triangle_number_with_n_divisors(6)) # expect 28
print(first_triangle_number_with_n_divisors(501))
